// This module contains all relevant functions for
// querying data from the Prometheus database.

import moment from "moment";

const api = "http://localhost:9090/api/v1/query?";

function formatQuery(query, range, offset) {
    // WARNING: converts to scalar, which strips label names
    query = query.replaceAll("{r}", range).replaceAll("{o}", offset);
    return `${api}query=scalar(${query})`;
}

export function oldestSample() {
    // Returns the time of the oldest sample in the database.
    // Note: the resolution on this query may need to be shortened
    // if Prometheus has been running for less than a day.
    return (
        fetch(formatQuery("min_over_time(timestamp(up)[5y:1d])"))
            .then(res => res.json())
            .then(res => moment.unix(res.data.result[1]))
    );
}

export function fetchMostRecent() {
    // this query currently gets all metrics from the
    // "hvac" job, where the `__name__` attribute
    // does not match regex `(scrape).*`, since
    // those are auto-generated by prometheus.
    return (
        fetch(api + 'query={job="hvac",__name__!~"(scrape).*"}')
            .then(res => res.json())
            .then(res => extractLiveMetrics(res.data.result))
    );
}

// this function takes a response from a prometheus query
// and returns just the values we want.
function extractLiveMetrics(result) {
    console.log(result);
    let metrics = result.map(metric => {
        return ({'name': metric['metric']['__name__'],
                 'value': metric['value'][1]}
        );
    });

    // From our response, check the "up" metric, which tells
    // us if Prometheus is able to actively read from the sensors.
    let up_index;
    for (let i = 0; i < metrics.length; i++) {
        if (metrics[i]['name'] === "up") {
            up_index = i;
            break;
        }
    }

    if (metrics[up_index]['value'] !== "1") {
        throw new Error("Prometheus is unable to read sensors. Is the Flask app running?");
    }

    // we don't want to display this metric to the user
    delete metrics[up_index];
    return metrics;
}

export function getRangeOffset(startDate, endDate) {
    console.log("startDate: " + startDate.toString());
    console.log("endDate: " + endDate.toString());

    let range = endDate.diff(startDate, 'minutes');
    let offset = moment().diff(endDate, 'minutes');

    console.log(`range: ${range.toString()} minutes`);
    console.log(`offset: ${offset.toString()} minutes`);

    if (range <= 0) {
        throw new Error(`startDate must be earlier than endDate (range: ${range} minutes)`);
    }
    if (offset < 0) {
        throw new Error(`Cannot query the future (offset: ${offset} minutes)`);
    }

    return {
        'range': `${range}m`,
        'offset': offset > 0 ? ` offset ${offset}m` : "",
    }
}

function extract(response) {
    if (response.status === "error") {
        // throw new Error(response.error);
        console.error(response.error);
        return Promise.resolve(null);
    }

    try {
        return Promise.resolve(response.data.result[1]);
    } catch {
        // throw new Error("...");
        console.error("Unable to extract `data.result[1]` from: ", response);
        return Promise.resolve(null);
    }
}

// This function is currently experimental and will be
// eventually used with the historical view.
// It will retrieve specific metrics over the time
// range from `startDate` to `endDate`.
export function fetchRangeAggregates(startDate, endDate) {
    // errors must be returned as promises since
    // fetches are asynchronous
    const {range, offset} = getRangeOffset(startDate, endDate);

    let query = formatQuery("changes(is_on[{r}]{o})", range, offset);
    console.log(`query: ${query}`);

    fetch(query)
        .then(res => res.json())
        .then(res => extract(res))
        .then(res => console.log("cycles: ", res));

    query = formatQuery(
        "avg_over_time(((incoming_air - outgoing_air) and (is_on == 1))[{r}:15s]{o})",
        range, offset
    );
    console.log(`query: ${query}`);

    fetch(query)
        .then(res => res.json())
        .then(res => extract(res))
        .then(res => console.log("avg: ", res));
}